Run ( 실행 ) > Run Configurations > Gradle Task
프로젝트 우클릭 > Run AS.. > Run Configurations > Gradle Task

Gradle Tasks > add
bootJar

Working Directory >
${workspace_loc:/[프로젝트명]}
입력 후 Run

C:\spring-workspace\test_demo\build\libs 에 jar파일 생긴다.
C:\[워크스페이스명]\[프로젝트명]\build\libs

test_project-0.0.1-SNAPSHOT.jar
[프로젝트명] - [버전] - SNAPSHOT.jar

1. AWS EC2 Ubuntu Linux 인스턴스 (VM) 생성
	- JAR : 내장 톰캣으로 배포 , ( ThymeLeaf 사용시 JAR 배포 )
	- WAR : 외장 톰캣 사용. ( JSP 사용시 WAR 배포 )

	AWS ubuntu VM 생성
	
	putty 접속
	ubuntu
	
	$ pwd ( 현재 경로 확인 ) >> /home/ubuntu
	$ hostname ( 호스트네임 확인 )
	
	- 컴퓨터 이름 변경
	$ sudo vi /etc/hostname
	$ dd > i > srv1 > esc > : > wq
	$ sudo reboot
	>>> 재부팅 후
	$ ubuntu 로 접속
	$ hostname ( 바뀐 호스트 네임 확인 )
	
	- 시스템 시간 변경
	$ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
	
	- VM에 JDK 설치 ( jar file 압축 풀기 )
	$ sudo apt update
	$ sudo apt install openjdk-17-jre-headless
	$ java -version	으로 설치 확인
	$ mkdir [프로젝트 저장할 디렉토리 생성] >> /home/ubuntu/[생성된폴더]
	
	- 개발된파일.jar 서버에 전송
	파일질라로 AWS VM(우분투)에 접속
	mkdir한 폴더에 jar파일 전송
	
	- VM 에서 jar 실행
	putty 에서 확인
	$ cd [프로젝트 전송한 폴더명]
	$ ls >> project-0.0.1-SNAPSHOT.jar
	$ java -jar project-0.0.1-SNAPSHOT.jar
	
	- AWS 방화벽 열기
	EC2 > 인스턴스 > 보안 > 보안그룹 > 인바운드 규칙 > 인바운드 규칙 편집 > 규칙 추가
	유형 : 사용자 지정 TCP
	포트범위 : 8585
	소스 : Anywhere IPv4
	
	- Putty 에서 실행중인 프로세스 확인
	$ ps -ef (프로세스 전체 내용 출력 )
	$ ps -ef | grep java | grep [프로젝트 명] (java 와 [프로젝트 명] 이 포함된 프로세스만 출력)
	
	- PID 확인
	UID : 계정에 부여되는 고유 번호
	PID : 프로세스에 부여되는 고유 번호
	GID : 그룹에게 부여되는 고유 번호
	
	프로세스 강제 종료 : ( 실행중인 서비스 강제 종료 )
	$ sudo kill -9 [PID]
	
	- 80번 포트로 실행 ( 기본 포트 : 8080 , 사용자 지정포트는 sudo 명령 없이도 사용 가능 )
	80번 포트는 root 권한으로 실행 해야 하므로 sudo 명령이 필요하다.
	$ sudo java -Dserver.port=80 -jar test_demo-0.0.1-SNAPSHOT.jar
	
	- 배포시 백그라운드로 실행 (&)
	포그라운드 작동 : $ sudo java -jar test_demo-0.0.2-SNAPSHOT.jar
	백그라운드 작동 : $ sudo java -jar test_demo-0.0.1-SNAPSHOT.jar &
	
	==========================================
	- 서비스 시작 스크립트 만들기 : start.sh
	#!/bin/bash
	
	JAR=test_demo/test_demo-0.0.1-SNAPSHOT.jar
	LOG=/home/ubuntu/test_demo/test_demo.log
	
	nohup java -jar $JAR > $LOG 2>&1 &
	==========================================
	실행 권한 부여 : sudo chmod +x start.sh
	
	
	==========================================
	- 서비스 종료 스크립트 만들기 : stop.sh
	#!/bin/bash
	test_demo_PID=$(ps -ef | grep java | grep test_demo | awk '{print $2}')
	
	if [ -z "$test_demo_PID" ];
	then
		echo "test_demo is not running"
	else
		kill -9 $test_demo_PID
		echo "test_demo has Stopped"
	fi
	==========================================
	실행 권한 부여 : sudo chmod +x stop.sh

-----------------------------------------------------------------
	3Tier
	- 하나의 시스템에 Web Server , WAS , DB 를 사용하는 환경은 확장이 어렵다.
	- 3Tier 로 구성하면 이러한 확장이 쉬워진다.

	Web Server ( Nginx ) <===> WAS ( Tomcat ) <===> DataBase ( Oracle )
	
AWS VM 생성 ( 2개 )
	- Web : WebServer ( TCP 80 ) , WAS ( Tomcat : TCP 8585 )
		- AWS 방화벽 설정 : TCP 80 , TCP 9696
	public IP : 3.34.46.182
		- 사용자명 변경 : $ sudo hostnamectl set-hostname [hostname]
		- 시간 설정  : $ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
		- 우분투 방화벽 설정 : sudo ufw disable
		- JDK 설치 ( 17 )
			- $ sudo apt update
			- $ sudo apt install openjdk-17-jre-headless
			- $ java -version
		
	- DB : Oracle , Docker 레지스트리에서 Oracle 이미지 다운 ( TCP 1521 )
	public IP : 3.35.233.226
		- 사용자명 변경 : $ sudo hostnamectl set-hostname [hostname]
		- 시간 설정  : $ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
		- 도커 설치 : 도커 레지스트리에서 Oracle 21 도커 이미지 다운


-----------------

• Docker install
	- https://www.docker.com/	( 공식 홈페이지 )
	- https://docs.docker.com/	( 공식 문서 )
	- https://hub.docker.com/	( 도커 이미지 저장소 )
	- Linux ( HOST ) : Ubuntu , CentOS
	- Windows , MAC : test, Dev Environment
	- Docker Host : Docker , Daemon , Registry 에 도커 이미지를 바운받아 실행 , 메모리에 로드
	
• 도커 설치
	• 기존의 도커 설치된 경우 도커 제거
	$ sudo apt-get remove docker docker-engine docker.io containerd runc
	
	• 레파지토리 업데이트 , 요구 프로그램 설치
	$ sudo apt-get update
	$ sudo apt-get install \
	ca-certificates \
	curl \
	gnupg \
	lsb-release
	
	• 도커 GPG 키 설치
	$ sudo mkdir -p /etc/apt/keyrings
	$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
	
	• 레포지토리 URL 등록
	$ echo \
	"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
	$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
	
	• 도커 엔진 설치
	$ sudo apt-get update
	$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
	
	• 도커 설치 확인
	$ docker --version
	
	• 계정 설정
	$ sudo passwd root ( 비밀번호 설정을 하지 않았으면 접속 불가 , 초기 비밀번호 설정 필요 )
	$ su – root ( 루트 계정으로 이동 )
	# usermod -aG docker ubuntu
		//ubuntu 계정을 docker 그룹에 포함  
		//현재 로그온한 계정이 docker 그룹에 포함되어 있어야 docker의 기능을 사용할 수 있는 권한을 가진다. 
	# cat /etc/group | grep docker
		docker:x:999:ubuntu
	
	# su - ubuntu ( 우분투 계정으로 이동 )
	$ docker 명령어 작동 확인
	
===	• oracle-xe 최신 버전 이미지를 도커 허브(Registry)에서 다운로드 및 컨테이너로 실행.
	$ docker run -d -p 1521:1521 -e ORACLE_PASSWORD=1234 gvenzl/oracle-xe ( 2023.08.03 error )
		
		docker run : 도커 이미지를 다운받아서 실행
		-d option : 백그라운드 실행 옵션
		-p option : port mapping - 1521 (host) : 1521 (container)
		-e option : ORACLE_PASSWORD=1234 : system 계정의 password
		gvenzl/oracle-xe:버전 : 도커허브계정/이미지:[버전]
		
	• 도커 확인
		$ docker ps ( 프로세스 확인 )
		$ docker images ( 이미지 확인 )
	
	• 도커 컨테이너, 도커 이미지를 모두 제거 ( local의 모든 container, images 제거 )
	$ docker rm -f $(docker ps -a -q) && docker rmi -f $(docker images -q)
	

=== • MySQL docker image 설치
	$ docker run -d -p 3306:3306 --name db-mysql -e MYSQL_ROOT_PASSWORD=1234 mysql
	
-----------------
	
	
- application-prod.property ( 배포 환경 ) 적용하여 배포.
	$ java -Dspring.profiles.active=prod -jar sbb-0.0.3-SNAPSHOT.jar
	
	
- production 환경 서비스 시작 스크립트 만들기 : $ vi start_prod.sh
	==========================================
	#!/bin/bash
	
	JAR=test_demo-0.0.3-SNAPSHOT.jar
	LOG=/home/ubuntu/test_demo/test_demo.log
	export spring_profiles_active=prod
	
	nohup java -jar $JAR > $LOG 2>&1 &
	==========================================
	실행 권한 부여 : sudo chmod +x start_prod.sh
	실행 : ./start_prod.sh
	
	==========================================
- 서비스 종료 스크립트 만들기 : $ vi stop.sh
	#!/bin/bash
	test_demo_[PID]=$(ps -ef | grep java | grep test_demo | awk '{print $2}')
	
	if [ -z "$test_demo_[PID]" ];
	then
		echo "test_demo is not running"
	else
		kill -9 $test_demo_[PID]
		echo "test_demo has Stopped"
	fi
	==========================================
	실행 권한 부여 : sudo chmod +x stop.sh
	실행 : ./stop.sh

	
	